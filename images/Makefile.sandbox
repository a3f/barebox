# SPDX-License-Identifier: GPL-2.0-or-later

pblb-$(CONFIG_SANDBOX) += sandbox_main
FILE_barebox = sandbox_main.elf
sandbox-$(CONFIG_SANDBOX) += barebox

pblb-$(CONFIG_FUZZ_EXTERNAL) += main
FILE_fuzz-barebox = main.elf
LDFLAGS_main = -fsanitize=fuzzer
sandbox-$(CONFIG_FUZZ_EXTERNAL) += fuzz-barebox

# create top level hardlink
FILE_../barebox = barebox
sandbox-$(CONFIG_SANDBOX) += ../barebox

fuzzer-$(CONFIG_FITIMAGE)	+= fit
fuzzer-y			+= printf
fuzzer-$(CONFIG_OFTREE)		+= dtb
fuzzer-$(CONFIG_VIRTIO)		+= vring
fuzzer-$(CONFIG_FILETYPE)	+= filetype

ifeq ($(CONFIG_SANDBOX),y)

quiet_cmd_elf__ = LD      $@
      cmd_elf__ = $(CC) -o $@ $(BAREBOX_LDFLAGS) \
	-Wl,-T,$(pbl-lds) -Wl,--defsym=main=$(2) -Wl,--whole-archive \
	$(obj)/../$(BAREBOX_PROPER) $(BAREBOX_PBL_OBJS) -Wl,--no-whole-archive \
	-lrt -pthread $(SANDBOX_LIBS) $(LDFLAGS_$(@F))

image-y += $(sandbox-y)

quiet_cmd_lnh = LN      $@
      cmd_lnh = ln -f $< $@

ifeq ($(CONFIG_FUZZ_EXTERNAL),y)
$(foreach fuzzer, $(fuzzer-y), \
	$(eval FILE_fuzz-$(fuzzer) = fuzz-barebox) \
	$(eval sandbox-y += fuzz-$(fuzzer)))
endif

.SECONDEXPANSION:
$(patsubst %,$(obj)/%, $(sandbox-y)): %: $(obj)/$$(FILE_$$(@F)) FORCE
	$(Q)if [ -z $(FILE_$(@F)) ]; then echo "FILE_$(@F) empty!"; false; fi
	$(call if_changed,lnh)

endif
